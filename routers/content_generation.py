from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from services.gpt import generate_post_text
from utils.limiter import check_and_decrease_limit

router = Router()

# --- FSM States ---
class ContentStates(StatesGroup):
    waiting_for_idea = State()


# --- –ö–æ–º–∞–Ω–¥–∞ /–∫–æ–Ω—Ç–µ–Ω—Ç ---
@router.message(F.text == "/–∫–æ–Ω—Ç–µ–Ω—Ç")
async def start_content_generation(message: Message, state: FSMContext):
    await message.answer(
        "‚ú® –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π üëÄ\n\n"
        "–ú–æ–∂–µ–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ:\n"
        "- –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å–¥–µ–ª–∫—É,\n"
        "- –∫—Ä—É—Ç–æ–π –æ–±—ä–µ–∫—Ç,\n"
        "- —Å–≤–µ–∂—É—é –Ω–æ–≤–æ—Å—Ç—å,\n"
        "‚Äî –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–≤–æ–∏ –º—ã—Å–ª–∏, –∫–∞–∫ —Ä–∏–µ–ª—Ç–æ—Ä–∞.\n\n"
        "üí° –ù–∞–ø–∏—à–∏, –ø—Ä–æ —á—Ç–æ —Ç—ã –±—ã —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç–µ–ª —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å ‚Äî —è —ç—Ç–æ –¥–æ–∫—Ä—É—á—É –∏ –≤—ã–¥–∞–º —Ç–µ–±–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚ú®"
    )
    await state.set_state(ContentStates.waiting_for_idea)


# --- FSM –û—Ç–≤–µ—Ç –Ω–∞ –∏–¥–µ—é ---
@router.message(ContentStates.waiting_for_idea)
async def handle_idea(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not check_and_decrease_limit(user_id, action="post"):
        await message.answer("‚õî –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏ –ª–∏–º–∏—Ç.")
        return

    await message.answer("üí≠ –î—É–º–∞—é –Ω–∞–¥ —Ç–µ–∫—Å—Ç–æ–º...")
    result = await generate_post_text(message.text)
    await message.answer(f"üéâ –í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç:\n\n{result}")
    await state.clear()
